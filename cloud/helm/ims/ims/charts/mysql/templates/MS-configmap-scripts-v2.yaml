apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "mysql.configMap-script.name" . }}
  labels:
    app: {{ .Values.configMap.name }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    heritage: {{ .Release.Service | quote }}
    release: {{ .Release.Name | quote }}
data:
  init-mysql.sh: |
    #!/bin/bash
    set -ex
    # Generate mysql server-id from pod ordinal index.
    [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
    ordinal=${BASH_REMATCH[1]}
    echo [mysqld] > /mnt/conf.d/server-id.cnf
    # Add an offset to avoid reserved server-id=0 value.
    echo server-id=$((100 + $ordinal)) >> /mnt/conf.d/server-id.cnf
    # Copy appropriate conf.d files from config-map to emptyDir.
    if [[ $ordinal -eq 0 ]]; then
    cp /mnt/config-map/master.cnf /mnt/conf.d/
    else
    cp /mnt/config-map/slave.cnf /mnt/conf.d/
    fi
  clone-mysql.sh: |
    #!/bin/bash
    set -ex
    # Skip the clone if data already exists.
    [[ -d /var/lib/mysql/mysql ]] && exit 0
    # Skip the clone on master (ordinal index 0).
    [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
    ordinal=${BASH_REMATCH[1]}
    [[ $ordinal -eq 0 ]] && exit 0
    # Clone data from previous peer.
    #ncat --recv-only mysql-$(($ordinal-1)).mysql-svc 3307 | xbstream -x -C /var/lib/mysql
    ncat --recv-only {{ template "mysql.fullname" . }}-$(($ordinal-1)).{{ template "mysql.hs.name" . }} 3307 | xbstream -x -C /var/lib/mysql
    # Prepare the backup.
    xtrabackup --prepare --target-dir=/var/lib/mysql

  xtrabackup-script.sh: |
    set -ex
    cd /var/lib/mysql

    # Determine binlog position of cloned data, if any.
    if [[ -f xtrabackup_slave_info && "x$(<xtrabackup_slave_info)" != "x" ]]; then
      # XtraBackup already generated a partial "CHANGE MASTER TO" query
      # because we're cloning from an existing slave. (Need to remove the tailing semicolon!)
      cat xtrabackup_slave_info | sed -E 's/;$//g' > change_master_to.sql.in
      # Ignore xtrabackup_binlog_info in this case (it's useless).
      rm -f xtrabackup_slave_info xtrabackup_binlog_info
    elif [[ -f xtrabackup_binlog_info ]]; then
      # We're cloning directly from master. Parse binlog position.
      [[ `cat xtrabackup_binlog_info` =~ ^(.*?)[[:space:]]+(.*?)$ ]] || exit 1
      rm -f xtrabackup_binlog_info xtrabackup_slave_info
      echo "CHANGE MASTER TO MASTER_LOG_FILE='${BASH_REMATCH[1]}',\
            MASTER_LOG_POS=${BASH_REMATCH[2]}" > change_master_to.sql.in
    fi

    # Check if we need to complete a clone by starting replication.
    if [[ -f change_master_to.sql.in ]]; then
      echo "Waiting for mysqld to be ready (accepting connections)"
      until mysql -uroot -p${MYSQL_ROOT_PASSWORD} -h 127.0.0.1 -e "SELECT 1"; do sleep 1; done
      # reset slave for issue "Slave: Failed to initialize the master info structure for channel ''; its record may still be present in 'mysql.slave_master_info' table, consider deleting it."
      mysql -uroot -p${MYSQL_ROOT_PASSWORD} -h 127.0.0.1 -e "RESET SLAVE"; sleep 5;
      echo "Initializing replication from clone position"
      mysql -uroot -p${MYSQL_ROOT_PASSWORD} -h 127.0.0.1 \
            -e "$(<change_master_to.sql.in), \
                    MASTER_HOST='{{ template "mysql.fullname" . }}-0.{{ include "mysql.hs.name" . }}', \
                    MASTER_USER='root', \
                    MASTER_PASSWORD='${MYSQL_ROOT_PASSWORD}', \
                    MASTER_CONNECT_RETRY=10; \
                  START SLAVE;" || exit 1
      # In case of container restart, attempt this at-most-once.
      mv change_master_to.sql.in change_master_to.sql.orig
    fi

    # Start a server to send backups when requested by peers.
    exec ncat --listen --keep-open --send-only --max-conns=1 3307 -c \
      "xtrabackup --backup --slave-info --stream=xbstream --host=127.0.0.1 --user=root --password=${MYSQL_ROOT_PASSWORD}"
