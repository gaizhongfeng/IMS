启动docker MySQL容器的描述文件

1. 在docker 环境中新建一个目录
2. 将 ./db 的四个文件复制到docker  环境
3. 执行  docker build -t ims-mysql/test .   创建docker image
4. 执行 docker run --name mysql-svc -p 13306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d ims-mysql/test  运行容器
验证：
1. 在docker 环境中执行 docker exec -it ims-mysql bash  进入容器
        . 执行 mysql -uroot -p123456  进入mysql
        . 执行 show databases; 查看数据库， 会有 feng 的数据库创建出来
        . 执行 use feng;  show tables;  查询表
2. 在window 上 用Navicat for MySQL 连接dockerIP:13306  可以连接成功
3. 在idea 中，将项目的数据库连接改为dockerIP:13306 , 项目可以运行成功


-----setup.sh-----

# !bin/bash
# 登录mysql
mysql -uroot -p$MYSQL_ROOT_PASSWORD <<EOF
# 设置字符集 ， 防止中文乱码
SET NAMES utf8;
# 执行sql 语句
source $WORK_PATH/$FILE_1;
source $WORK_PATH/$FILE_2;
# 设置登录方式为mysql_native_password ， 这样可以在外部登录 。 $MYSQL_ROOT_PASSWORD 在执行docker run 时指定
ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY '$MYSQL_ROOT_PASSWORD';


 # 查看mysql 编码v2.10
 show variables like "char%";

 # 查看mysql 用户信息
 select host,user,plugin,authentication_string from mysql.user;



-----Dockerfle-----
// 继承mysql 8.0
FROM mysql:8.0
// 运行脚本的目录， 要执行对数据库操作的脚本必须放在这个目录中执行
ENV AUTO_RUN_DIR /docker-entrypoint-initdb.d
// 创建工作目录
WORKDIR /work
// 设置个环境变量指向这个目录， 在后边复制sql文件 和 调用sql 直接用$WORK_PATH 引用
ENV WORK_PATH /work
// 复制脚本文件
COPY setup.sh $AUTO_RUN_DIR/
// 复制sql
COPY *.sql $WORK_PATH
将sql name 设置为环境变量， 在setup.sh 中可以直接调用
ENV FILE_1 initSql1.sql
ENV FILE_2 initSql2.sql
// 运行 setup.sh
RUN chmod a+x $AUTO_RUN_DIR/setup.sh



IMS\cloud\dockerFile\db-maste-slave 为MySQL master-slave 提供镜像，只是使用的MySQL版本不同
    docker build -t ims-mysql/test:v2.0 .